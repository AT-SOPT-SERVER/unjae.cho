name: CI/CD Docker SpringBoot

on:
  push:
    branches: [ "study" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.CD_APPLICATION }}" > ./src/main/resources/application.yml
          cat ./src/main/resources/application.yml

      - name: Build Project
        run: ./gradlew clean build -x test

      # 4. Docker 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/tests-server .

      - name: Publish Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/tests-server

      # 6. EC2 접속 및 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo chmod 666 /var/run/docker.sock
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull tests-server
            docker stop tests-server || true
            docker rm tests-server || true
            docker run -d -p 8080:8080 --name tests-server ${{ secrets.DOCKER_USERNAME }}/tests-server
